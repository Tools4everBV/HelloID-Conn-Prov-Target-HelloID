{
  "Version": "v1",
  "MappingFields": [
    {
      "Name": "firstName",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Field",
          "Value": "\"Person.Name.NickName\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "password",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create"
          ],
          "MappingMode": "Complex",
          "Value": "\"// Please enter the mapping logic to generate a random password value.\\r\\nfunction generatePassword(){\\r\\n\\r\\n    // Initialize these variables for the algorithm to meet your password complexity rules\\r\\n    const passwordLength = 10;\\r\\n    const minUpper = 1;\\r\\n    const maxUpper = 2;\\r\\n    const minNumeric = 1;\\r\\n    const maxNumeric = 2;\\r\\n    const minSpecial = 1;\\r\\n    const maxSpecial = 2;\\r\\n\\r\\n    // Do not change any code below this line !!!\\r\\n\\r\\n    const numberUpper = Math.floor((Math.random() * maxUpper) + minUpper);\\r\\n    const numberNumeric = Math.floor((Math.random() * maxNumeric) + minNumeric);\\r\\n    const numberSpecial = Math.floor((Math.random() * maxSpecial) + minSpecial);\\r\\n    const numberLower = passwordLength - (numberUpper + numberNumeric + numberSpecial);\\r\\n\\r\\n    let upperChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\\r\\n    let lowerChars = 'abcdefghijklmnopqrstuvwxyz';\\r\\n    let numberChars = '0123456789';\\r\\n    let specialChars = '!#$@*?';\\r\\n\\r\\n    let getRandomValue = function(values) {\\r\\n        return values.charAt(Math.floor(Math.random() * values.length));\\r\\n    };\\r\\n\\r\\n    let password = [];\\r\\n    for(let i = 0; i < numberNumeric; ++i) { password.push(getRandomValue(numberChars)) }\\r\\n    for(let i = 0; i < numberUpper; ++i) { password.push(getRandomValue(upperChars)) }\\r\\n    for(let i = 0; i < numberSpecial; ++i) { password.push(getRandomValue(specialChars)) }\\r\\n    for(let i = 0; i < numberLower; ++i) { password.push(getRandomValue(lowerChars)) }\\r\\n\\r\\n    function randomizeCharSequence(passwordObject){\\r\\n        for(let j, x, i = passwordObject.length; i; j = Math.floor(Math.random() * i), x = passwordObject[--i], passwordObject[i] = passwordObject[j], passwordObject[j] = x);\\r\\n        return passwordObject;\\r\\n    }\\r\\n\\r\\n    return randomizeCharSequence(password).join('');\\r\\n}\\r\\n\\r\\ngeneratePassword();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": false
        }
      ]
    },
    {
      "Name": "mustChangePassword",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create"
          ],
          "MappingMode": "Fixed",
          "Value": "\"TRUE\"",
          "UsedInNotifications": false,
          "StoreInAccountData": false
        }
      ]
    },
    {
      "Name": "managedByUserGUID",
      "Description": "Set within script, as the aRef of manager is used.",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "None",
          "Value": "\"\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "userAttributes.title",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Field",
          "Value": "\"Person.PrimaryContract.Title.Name\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "userAttributes.department",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Field",
          "Value": "\"Person.PrimaryContract.Department.DisplayName\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "userAttributes.phoneNumber",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Field",
          "Value": "\"Person.Contact.Business.Phone.Mobile\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "userName",
      "Description": "[Required] Used for correlation",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Disable",
            "Create",
            "Delete",
            "Enable",
            "Update"
          ],
          "MappingMode": "Complex",
          "Value": "\"function getUserName() {\\r\\n    let contactEmail = Person.Accounts._293601d233c64c199633281722723d45.UserPrincipalName;\\r\\n    return contactEmail;\\r\\n}\\r\\n\\r\\ngetUserName();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "source",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create"
          ],
          "MappingMode": "Fixed",
          "Value": "\"Local\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "isEnabled",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create"
          ],
          "MappingMode": "Fixed",
          "Value": "\"false\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        },
        {
          "MapForActions": [
            "Enable"
          ],
          "MappingMode": "Fixed",
          "Value": "\"true\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        },
        {
          "MapForActions": [
            "Disable"
          ],
          "MappingMode": "Fixed",
          "Value": "\"false\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "contactEmail",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "Complex",
          "Value": "\"function getContactEmail() {\\n    let contactEmail = Person.Accounts._293601d233c64c199633281722723d45.UserPrincipalName;\\n    return contactEmail;\\n}\\n\\ngetContactEmail();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "userGUID",
      "Description": "[Required] Set within script",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create",
            "Update"
          ],
          "MappingMode": "None",
          "Value": "\"\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    },
    {
      "Name": "userAttributes.description",
      "Description": "",
      "Type": "Text",
      "MappingActions": [
        {
          "MapForActions": [
            "Create"
          ],
          "MappingMode": "Complex",
          "Value": "\"function formattedTimestamp() {\\n    const currentDate = new Date()\\n    const date = currentDate.toISOString().split('T')[0];\\n    const time = currentDate.toTimeString().split(' ')[0].replace(/:/g, ':');\\n    return `${date} ${time}`\\n}\\n\\nfunction getDescription() {\\n    let formattedDate = formattedTimestamp();\\n    let description = \\\"Created by HelloID Provisioning at: \\\" + formattedDate\\n    return description;\\n}\\n\\ngetDescription();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        },
        {
          "MapForActions": [
            "Enable"
          ],
          "MappingMode": "Complex",
          "Value": "\"function formattedTimestamp() {\\r\\n    const currentDate = new Date()\\r\\n    const date = currentDate.toISOString().split('T')[0];\\r\\n    const time = currentDate.toTimeString().split(' ')[0].replace(/:/g, ':');\\r\\n    return `${date} ${time}`\\r\\n}\\r\\n\\r\\nfunction getDescription() {\\r\\n    let formattedDate = formattedTimestamp();\\r\\n    let description = \\\"Enabled by HelloID Provisioning at: \\\" + formattedDate\\r\\n    return description;\\r\\n}\\r\\n\\r\\ngetDescription();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        },
        {
          "MapForActions": [
            "Update"
          ],
          "MappingMode": "Complex",
          "Value": "\"function formattedTimestamp() {\\r\\n    const currentDate = new Date()\\r\\n    const date = currentDate.toISOString().split('T')[0];\\r\\n    const time = currentDate.toTimeString().split(' ')[0].replace(/:/g, ':');\\r\\n    return `${date} ${time}`\\r\\n}\\r\\n\\r\\nfunction getDescription() {\\r\\n    let formattedDate = formattedTimestamp();\\r\\n    let description = \\\"Updated by HelloID Provisioning at: \\\" + formattedDate\\r\\n    return description;\\r\\n}\\r\\n\\r\\ngetDescription();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        },
        {
          "MapForActions": [
            "Disable"
          ],
          "MappingMode": "Complex",
          "Value": "\"function formattedTimestamp() {\\r\\n    const currentDate = new Date()\\r\\n    const date = currentDate.toISOString().split('T')[0];\\r\\n    const time = currentDate.toTimeString().split(' ')[0].replace(/:/g, ':');\\r\\n    return `${date} ${time}`\\r\\n}\\r\\n\\r\\nfunction getDescription() {\\r\\n    let formattedDate = formattedTimestamp();\\r\\n    let description = \\\"Disabled by HelloID Provisioning at: \\\" + formattedDate\\r\\n    return description;\\r\\n}\\r\\n\\r\\ngetDescription();\"",
          "UsedInNotifications": false,
          "StoreInAccountData": true
        }
      ]
    }
  ],
  "UniqueFieldNames": []
}